
@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap') layer(base);

@import 'tailwindcss';


/** Plugins **/
@import './assets/styles/apexchart.css';

@plugin "@tailwindcss/forms";
@plugin "@tailwindcss/typography";
@plugin "@tailwindcss/aspect-ratio";
@plugin "tailwind-scrollbar";

@custom-variant dark (&:where(.dark, .dark *));

@theme {
  --font-*: initial;
  --font-poppins: Poppins, system-ui, sans-serif;
  --font-nunito: Nunito Sans, sans-serif;

  --animate-wiggle: wiggle 1s ease-in-out infinite;
  --animate-fade-in-down: fade-in-down 0.3s ease-out;
  --animate-fade-out-down: fade-out-down 0.3s ease-out;
  --animate-fade-in-up: fade-in-up 0.3s ease-out;
  --animate-fade-out-up: fade-out-up 0.3s ease-out;

  --shadow-custom: 0px 0px 50px 0px rgb(82 63 105 / 15%);

  --color-border: var(--border);
  --color-background: var(--background);
  --color-foreground: var(--foreground);

  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);

  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);

  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);

  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);

  @keyframes wiggle {

    0%,
    100% {
      transform: rotate(-3deg);
    }

    50% {
      transform: rotate(3deg);
    }
  }

  @keyframes fade-in-down {
    0% {
      opacity: 0;
      transform: translateY(-10px);
    }

    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fade-out-down {
    from {
      opacity: 1;
      transform: translateY(0px);
    }

    to {
      opacity: 0;
      transform: translateY(10px);
    }
  }

  @keyframes fade-in-up {
    0% {
      opacity: 0;
      transform: translateY(10px);
    }

    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fade-out-up {
    from {
      opacity: 1;
      transform: translateY(0px);
    }

    to {
      opacity: 0;
      transform: translateY(10px);
    }
  }
}

@utility container {
  padding-inline: 1rem;

  @media (width >=theme(--breakpoint-sm)) {
    padding-inline: 2rem;
  }

  @media (width >=theme(--breakpoint-lg)) {
    padding-inline: 4rem;
  }

  @media (width >=theme(--breakpoint-xl)) {
    padding-inline: 5rem;
  }

  @media (width >=theme(--breakpoint-2xl)) {
    padding-inline: 6rem;
  }
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {

  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

@utility dropdown-content {
  @apply pointer-events-none scale-95 opacity-0 duration-100 ease-in;

  .dropdown:hover>& {
    @apply pointer-events-auto block scale-100 animate-fade-in-up opacity-100 duration-200;
  }
}

@utility dropdown {
  &:hover>.dropdown-content {
    @apply pointer-events-auto block scale-100 animate-fade-in-up opacity-100 duration-200;
  }
}

@layer base {
  :root {
    --background: #FFFFFF;
    --foreground: #0C1420;
    --card: #F1F5F9;
    --card-foreground: #000000;
    --primary: #E11D48;
    --primary-foreground: #FFFFFF;
    --muted: #CFD9E5;
    --muted-foreground: #64748B;
    --destructive: #CC0033;
    --destructive-foreground: #FAFAFA;
    --border: #E2E8F0;
  }

  .dark {
    --background: #0A0A0A;
    --foreground: #F2F2F2;
    --card: #121212;
    --card-foreground: #262626;
    --muted: #262626;
    --muted-foreground: #A3A3A3;
    --border: #262626;
  }

  :root[data-theme='violet'] {
    --primary: #6E56CF;
  }

  .dark[data-theme='violet'] {
    --background: #060815;
    --foreground: #F6F8FB;
    --card: #0B0F1A;
    --card-foreground: #F6F8FB;
    --primary-foreground: #F6F8FB;
    --muted: #232B3D;
    --muted-foreground: #A1A8BF;
    --border: #232B3D;
  }

  :root[data-theme='red'] {
    --primary: #CC0033;
  }

  .dark[data-theme='red'] {
    --primary-foreground: #FFE5E5;
  }

  :root[data-theme='blue'] {
    --primary: #2490FF;
  }

  .dark[data-theme='blue'] {
    --background: #02080F;
    --foreground: #F8FAFC;
    --card: #0B1117;
    --card-foreground: #F8FAFC;
    --primary-foreground: #0F1729;
    --muted: #1E293B;
    --muted-foreground: #94A3B8;
    --border: #1E293B;
  }

  :root[data-theme='orange'] {
    --primary: #EA580C;
  }

  .dark[data-theme='orange'] {
    --background: #0C0A09;
    --foreground: #FAFAF9;
    --card: #141110;
    --card-foreground: #FAFAF9;
    --primary-foreground: #FAFAF9;
    --muted: #292524;
    --muted-foreground: #A8A29E;
    --border: #292524;
  }

  :root[data-theme='yellow'] {
    --primary: #FACC15;
  }

  .dark[data-theme='yellow'] {
    --background: #0C0A09;
    --foreground: #FAFAF9;
    --card: #141110;
    --card-foreground: #FAFAF9;
    --primary: #FACC15;
    --primary-foreground: #422006;
    --muted: #292524;
    --muted-foreground: #A8A29E;
    --border: #292524;
  }

  :root[data-theme='green'] {
    --primary: #22C55E;
  }

  .dark[data-theme='green'] {
    --primary: #22C55E;
    --primary-foreground: #052E16;
  }

}

/** Scroll bar **/
@supports selector(::-webkit-scrollbar) {
  .supports-scrollbars\: pr-2 {
    padding-right: 0.5rem;
  }
}

/** Custom Forms **/
[type='text'],
[type='email'],
[type='url'],
[type='password'],
[type='number'],
[type='date'],
[type='datetime-local'],
[type='month'],
[type='search'],
[type='tel'],
[type='time'],
[type='week'],
[multiple],
textarea,
select {
  @apply w-full rounded-md border border-border bg-background text-xs text-foreground placeholder-muted-foreground focus:z-10 focus:border-primary focus:outline-hidden focus:ring-primary;
}

[type='checkbox'],
[type='radio'] {
  @apply h-4 w-4 rounded-sm border-border bg-background checked:border-primary checked:bg-primary indeterminate:border-primary indeterminate:bg-primary focus:ring-2 focus:ring-primary;
}



/* LAYOUT COMPONENT: */
This has the bg-card as background is my understanding. 

SO that means that the background is --card: #F1F5F9; when is root or light mode. 
And the background is  --card: #121212; when is dark mode. 
<div class="flex h-screen w-full overflow-hidden">
  <!-- Sidebar -->
  <app-sidebar></app-sidebar>

  <div class="flex grow flex-col content-start overflow-hidden bg-card">
    <!-- Header -->
    <app-navbar></app-navbar>
    <!-- main content -->
    <div
      id="main-content"
      class="scrollbar-thumb-rounded scrollbar-track-rounded grow overflow-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-muted">
      <div class="mx-auto px-4 py-4 sm:px-8 lg:container">
        <router-outlet></router-outlet>
      </div>
    </div>

    <!-- footer -->
    <app-footer></app-footer>

    <!-- Bottom bar -->
    <!-- <app-bottom-navbar></app-bottom-navbar> -->
  </div>
</div>

We know that the background of the layout is a different color than     --background: #FFFFFF;
    --foreground: #0C1420;
    --card: #F1F5F9;
    --card-foreground: #000000;
    which is used for the sidenav, topmenu nav and footer. 




/* PROFILE MENU: */

/* In this profile menu, we have the  @for (item of themeColors; track $index) and the  @for (item of themeMode; track $index)
My understanding is that the theme colors changes the colors of the buttons and theme mode dark or light mode. */

<div class="relative ml-3">
  <!-- Profile Button -->
  <button (click)="toggleMenu()" class="bg-card relative flex rounded-full text-sm" type="button">
    <span class="sr-only">Open user menu</span>
    <img
      clickOutside
      (clickOutside)="isOpen = false"
      class="size-9 shrink-0 rounded-md"
      src="https://avatars.githubusercontent.com/u/12519008?v=4"
      alt="" />
  </button>
  <!-- Dropdown -->
  <div
    [@openClose]="isOpen ? 'open' : 'closed'"
    class="bg-background shadow-custom border-muted absolute z-20 mt-2 w-60 origin-top-right transform rounded-md border border-dashed py-4 ring-1 ring-transparent ring-opacity-5 transition focus:outline-hidden ltr:right-0 rtl:left-0">
    <div class="flext-row flex items-center px-4 pb-4">
      <div class="w-10 shrink-0">
        <img class="rounded-md" src="https://avatars.githubusercontent.com/u/12519008?v=4" alt="" />
      </div>
      <div class="text-foreground overflow-hidden px-2 text-sm font-semibold">
        Luciano Oliveira
        <p class="text-muted-foreground truncate text-ellipsis text-xs font-semibold">me&#64;lanno.dev</p>
      </div>
    </div>

    <div class="border-border border-b border-dashed"></div>

    <ul class="my-2 mx-2 flex flex-col">
      @for (item of profileMenu; track $index) {
      <li
        routerLink="{{ item.link }}"
        :key="$index"
        class="text-muted-foreground hover:bg-card hover:text-primary inline-flex cursor-pointer items-center gap-2 rounded-md px-2 py-2 text-xs font-semibold">
        <svg-icon src="{{ item.icon }}" [svgClass]="'h-5 w-5 text-muted-foreground/50'"> </svg-icon>
        {{ item.title }}
      </li>
      }
    </ul>
    <hr class="border-border border-dashed" />
    <div class="mx-4 my-2">
      <span class="text-foreground text-xs font-semibold">Color</span>
      <div class="mt-2 grid grid-cols-2 gap-2">
        @for (item of themeColors; track $index) {
        <div
          :key="$index"
          (click)="toggleThemeColor(item.name)"
          [ngClass]="{ 'border-muted-foreground/30 bg-card': item.name == themeService.theme().color }"
          class="focus-visible:ring-ring border-border bg-background text-muted-foreground hover:bg-card hover:text-foreground shadow-xs inline-flex h-8 cursor-pointer items-center justify-start space-x-2 whitespace-nowrap rounded-md border border-dashed px-3 text-xs font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50">
          <span
            [style.backgroundColor]="item.code"
            class="flex h-5 w-5 shrink-0 items-center justify-center rounded-full"></span>
          <p class="capitalize">{{ item.name }}</p>
        </div>
        }
      </div>
    </div>
    <div class="mx-4 my-2">
      <span class="text-foreground text-xs font-semibold">Mode</span>
      <div class="mt-2 grid grid-cols-2 gap-2">
        @for (item of themeMode; track $index) {
        <div
          :key="$index"
          (click)="toggleThemeMode()"
          [ngClass]="{ 'border-muted-foreground/30 bg-card': item == themeService.theme().mode }"
          class="focus-visible:ring-ring border-border bg-background text-muted-foreground hover:bg-card hover:text-foreground shadow-xs inline-flex h-8 cursor-pointer items-center justify-start space-x-2 whitespace-nowrap rounded-md border border-dashed px-3 text-xs font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50">
          <svg-icon
            [src]="
              item == 'light' ? 'assets/icons/heroicons/outline/sun.svg' : 'assets/icons/heroicons/outline/moon.svg'
            "
            [svgClass]="'h-5 w-5 text-muted-foreground/50'">
          </svg-icon>
          <p class="capitalize">{{ item }}</p>
        </div>
        }
      </div>
    </div>
    <div class="mx-4 my-2">
      <span class="text-foreground text-xs font-semibold">Direction</span>
      <div class="mt-2 grid grid-cols-2 gap-2">
        @for (item of themeDirection; track $index) {
        <div
          :key="$index"
          (click)="setDirection(item)"
          [ngClass]="{ 'border-muted-foreground/30 bg-card': item == themeService.theme().direction }"
          class="focus-visible:ring-ring border-border bg-background text-muted-foreground hover:bg-card hover:text-foreground shadow-xs inline-flex h-8 cursor-pointer items-center justify-start space-x-2 whitespace-nowrap rounded-md border border-dashed px-3 text-xs font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50">
          <svg-icon
            [src]="
              item == 'ltr'
                ? 'assets/icons/tablericons/text-direction-ltr.svg'
                : 'assets/icons/tablericons/text-direction-rtl.svg'
            "
            [svgClass]="'h-5 w-5 text-muted-foreground/50'">
          </svg-icon>
          <p class="uppercase">{{ item }}</p>
        </div>
        }
      </div>
    </div>
  </div>
</div>

import { animate, state, style, transition, trigger } from '@angular/animations';
import { NgClass } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { RouterLink } from '@angular/router';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { ThemeService } from '../../../../../core/services/theme.service';
import { ClickOutsideDirective } from '../../../../../shared/directives/click-outside.directive';

@Component({
  selector: 'app-profile-menu',
  templateUrl: './profile-menu.component.html',
  styleUrls: ['./profile-menu.component.css'],
  imports: [ClickOutsideDirective, NgClass, RouterLink, AngularSvgIconModule],
  animations: [
    trigger('openClose', [
      state(
        'open',
        style({
          opacity: 1,
          transform: 'translateY(0)',
          visibility: 'visible',
        }),
      ),
      state(
        'closed',
        style({
          opacity: 0,
          transform: 'translateY(-20px)',
          visibility: 'hidden',
        }),
      ),
      transition('open => closed', [animate('0.2s')]),
      transition('closed => open', [animate('0.2s')]),
    ]),
  ],
})
export class ProfileMenuComponent implements OnInit {
  public isOpen = false;
  public profileMenu = [
    {
      title: 'Your Profile',
      icon: './assets/icons/heroicons/outline/user-circle.svg',
      link: '/profile',
    },
    {
      title: 'Settings',
      icon: './assets/icons/heroicons/outline/cog-6-tooth.svg',
      link: '/settings',
    },
    {
      title: 'Log out',
      icon: './assets/icons/heroicons/outline/logout.svg',
      link: '/auth',
    },
  ];

  public themeColors = [
    {
      name: 'base',
      code: '#e11d48',
    },
    {
      name: 'yellow',
      code: '#f59e0b',
    },
    {
      name: 'green',
      code: '#22c55e',
    },
    {
      name: 'blue',
      code: '#3b82f6',
    },
    {
      name: 'orange',
      code: '#ea580c',
    },
    {
      name: 'red',
      code: '#cc0022',
    },
    {
      name: 'violet',
      code: '#6d28d9',
    },
  ];

  public themeMode = ['light', 'dark'];
  public themeDirection = ['ltr', 'rtl'];

  constructor(public themeService: ThemeService) {}

  ngOnInit(): void {}

  public toggleMenu(): void {
    this.isOpen = !this.isOpen;
  }

  toggleThemeMode() {
    this.themeService.theme.update((theme) => {
      const mode = !this.themeService.isDark ? 'dark' : 'light';
      return { ...theme, mode: mode };
    });
  }

  toggleThemeColor(color: string) {
    this.themeService.theme.update((theme) => {
      return { ...theme, color: color };
    });
  }

  setDirection(value: string) {
    this.themeService.theme.update((theme) => {
      return { ...theme, direction: value };
    });
  }
}



import { Injectable, signal } from '@angular/core';
import { Theme } from '../models/theme.model';
import { effect } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class ThemeService {
  public theme = signal<Theme>({ mode: 'dark', color: 'base', direction: 'ltr' });

  constructor() {
    this.loadTheme();
    effect(() => {
      this.setConfig();
    });
  }

  private loadTheme() {
    const theme = localStorage.getItem('theme');
    if (theme) {
      this.theme.set(JSON.parse(theme));
    }
  }

  private setConfig() {
    this.setLocalStorage();
    this.setThemeClass();
    this.setRTL();
  }

  public get isDark(): boolean {
    return this.theme().mode == 'dark';
  }

  private setThemeClass() {
    document.querySelector('html')!.className = this.theme().mode;
    document.querySelector('html')!.setAttribute('data-theme', this.theme().color);
  }

  private setLocalStorage() {
    localStorage.setItem('theme', JSON.stringify(this.theme()));
  }

  private setRTL() {
    document.querySelector('html')!.setAttribute('dir', this.theme().direction);
    this.setLocalStorage();
  }
}


export interface Theme {
  mode: string;
  color: string;
  direction: string;
}

/* Here is where the button changes based on the theme color. 
Specifically  */
    <button
        class="hover:bg-primary-600 bg-primary text-primary-foreground flex-none rounded-md px-4 py-2.5 text-xs font-semibold">
        Place a Bid
      </button>

<div class="bg-background flex min-h-[420px] flex-col rounded-lg p-8 sm:flex-row">
  <div
    [ngStyle]="{ 'background-image': 'url(' + nft.image + ')' }"
    class="min-h-[200px] w-full flex-1 cursor-pointer rounded-md bg-cover transition duration-150 ease-in-out hover:opacity-75"></div>
  <!-- Details  -->
  <div class="mt-4 flex flex-1 flex-col justify-between space-y-2 ltr:sm:ml-6 rtl:sm:mr-6 md:mt-0">
    <div>
      <small class="text-muted-foreground font-semibold">NFT ID: {{ nft.id }}</small>
      <h2 class="text-foreground text-2xl font-semibold">{{ nft.title }}</h2>
    </div>

    <div class="flex space-x-8">
      <!-- Avatar -->
      <div class="flex items-center space-x-2">
        <img class="mx-auto block h-7 rounded-full sm:mx-0 sm:shrink-0" [src]="nft.avatar" alt="creator face" />
        <div class="flex flex-col">
          <small class="text-muted-foreground text-xs">Creator</small>
          <a href="" class="text-foreground hover:text-primary text-xs font-semibold">
            {{ nft.creator }}
          </a>
        </div>
      </div>

      <!-- Price -->
      <div class="flex items-center space-x-2">
        <div class="bg-primary flex h-7 w-7 shrink-0 items-center justify-center rounded-full text-center">
          <span class="text-primary-foreground text-xs font-semibold">$</span>
        </div>

        <div class="flex flex-col">
          <small class="text-muted-foreground text-xs">Instant Price</small>
          <a href="" class="text-foreground hover:text-primary text-xs font-semibold"> {{ nft.instant_price }} ETH </a>
        </div>
      </div>
    </div>

    <div class="border-border rounded-md border border-dashed p-4 text-center">
      <small class="text-muted-foreground">Last Bid</small>
      <h1 class="text-foreground text-3xl font-semibold">{{ nft.last_bid }} ETH</h1>
      <span class="text-muted-foreground text-lg font-semibold">{{ nft.price | currency }}</span>
      <div class="text-muted-foreground mt-3 text-xs">Ending in</div>
      <div class="text-foreground font-semibold">{{ nft.ending_in }}</div>
    </div>

    <div class="flex items-center justify-between">
      <button
        class="hover:bg-primary-600 bg-primary text-primary-foreground flex-none rounded-md px-4 py-2.5 text-xs font-semibold">
        Place a Bid
      </button>
      <button
        class="lex-none bg-card text-muted-foreground hover:bg-muted hover:text-foreground rounded-md px-4 py-2.5 text-xs font-semibold">
        View Item
      </button>
    </div>
  </div>
</div>

import { CurrencyPipe, NgStyle } from '@angular/common';
import { Component, Input, OnInit } from '@angular/core';
import { Nft } from '../../../models/nft';

@Component({
  selector: '[nft-dual-card]',
  templateUrl: './nft-dual-card.component.html',
  imports: [NgStyle, CurrencyPipe],
})
export class NftDualCardComponent implements OnInit {
  @Input() nft: Nft = <Nft>{};

  constructor() {}

  ngOnInit(): void {}
}

/* SIDE NAV: */

/* Here is the side nav, we need to study this to understand how the test is being styled.
We need to ensure that the text in our project doenst change when we change the theme color. */
<nav
  [ngClass]="menuService.showSideBar ? 'w-[210px] xl:w-[280px]' : 'w-[70px]'"
  class="bg-background hidden h-full flex-col justify-between pt-3 transition-all duration-300 lg:flex">
  <div class="overflow-hidden">
    <!-- Logo -->
    <div
      [ngClass]="menuService.showSideBar ? 'justify-between' : 'justify-center'"
      class="mx-4 mb-2 flex h-9 items-center">
      <div class="flex items-center" *ngIf="menuService.showSideBar">
        <a
          (click)="toggleSidebar()"
          class="bg-primary flex cursor-pointer items-center justify-center rounded-sm p-2 focus:outline-hidden focus:ring-1">
          <svg-icon src="assets/icons/logo.svg"> </svg-icon>
        </a>
        <b class="text-foreground ps-2 ml-1 grow text-sm font-bold">
          {{ appJson.displayName }}
        </b>
      </div>
      <button
        (click)="toggleSidebar()"
        class="text-muted-foreground/50 hover:text-muted-foreground flex items-center justify-center rounded-md p-2 transition-all duration-200 focus:outline-hidden"
        [ngClass]="{ 'rotate-180': !menuService.showSideBar }">
        <svg-icon src="assets/icons/heroicons/solid/chevron-double-left.svg"> </svg-icon>
      </button>
    </div>

    <!-- Menu Items -->
    <div
      class="scrollbar-thumb--sm scrollbar-track-rounded scrollbar-thin scrollbar-track-transparent scrollbar-thumb-card h-full overflow-auto px-4">
      <app-sidebar-menu></app-sidebar-menu>
    </div>
  </div>

  <div class="mx-4 my-4 space-y-1">
    <!-- Version -->
    <a
      target="_blank"
      href="https://github.com/luciano-work/angular-tailwind"
      class="-sm hover:bg-card group flex h-9 cursor-pointer items-center justify-start p-2">
      <svg-icon
        src="assets/icons/heroicons/outline/information-circle.svg"
        [svgClass]="'h-5 w-5 text-muted-foreground/50'">
      </svg-icon>

      <div class="ml-3 truncate text-[10px] font-semibold tracking-wide focus:outline-hidden">
        <span class="bg-primary/10 text-primary px-2 font-semibold">v{{ appJson.version }}</span>
      </div>

      <div class="fixed w-full" *ngIf="!menuService.showSideBar">
        <span
          class="z-1 bg-foreground text-background absolute left-12 -top-4 w-auto min-w-max origin-left scale-0 p-2 text-xs font-bold shadow-md transition-all duration-200 group-hover:scale-100">
          v{{ appJson.version }}
        </span>
      </div>
    </a>
  </div>
</nav>

import { NgClass, NgIf } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { AngularSvgIconModule } from 'angular-svg-icon';
import packageJson from '../../../../../../package.json';
import { MenuService } from '../../services/menu.service';
import { SidebarMenuComponent } from './sidebar-menu/sidebar-menu.component';

@Component({
  selector: 'app-sidebar',
  templateUrl: './sidebar.component.html',
  styleUrls: ['./sidebar.component.css'],
  imports: [NgClass, NgIf, AngularSvgIconModule, SidebarMenuComponent],
})
export class SidebarComponent implements OnInit {
  public appJson: any = packageJson;

  constructor(public menuService: MenuService) {}

  ngOnInit(): void {}

  public toggleSidebar() {
    this.menuService.toggleSidebar();
  }
}

/* I believe this is the html where the text is styled for the sidebar.  */

<div *ngFor="let menu of menuService.pagesMenu">
  <div *ngIf="menuService.showSideBar" class="mx-1 flex items-center justify-between py-3">
    <small [ngClass]="{ hidden: !menuService.showSideBar }" class="text-muted-foreground/50 text-xs font-semibold">
      {{ menu.group }}
    </small>
  </div>
  <ul class="flex flex-col">
    <!-- List items -->
    <li *ngFor="let item of menu.items">
      <!-- Menu List -->
      <div
        (click)="toggleMenu(item)"
        [ngClass]="{
          'hover:bg-primary/10': !menuService.showSideBar && item.active,
          'hover:bg-card/50': !menuService.showSideBar
        }"
        class="text-muted-foreground hover:text-foreground group relative flex grow items-center gap-4 rounded-lg px-2">
        <!-- Icon -->
        <div [ngClass]="item.active && !menuService.showSideBar ? 'text-primary' : 'text-muted-foreground/50'">
          <svg-icon src="{{ item.icon }}" [svgClass]="'h-5 w-5'"> </svg-icon>
        </div>

        <!-- Condition -->
        <ng-container
          [ngTemplateOutlet]="item.children ? childMenu : parentMenu"
          [ngTemplateOutletContext]="{ item: item }">
        </ng-container>

        <!-- Workaround:: Enable routerLink -->
        <ng-template #parentMenu let-item="item">
          <div
            routerLink="{{ item.route }}"
            class="text-muted-foreground hover:text-primary flex h-[36px] cursor-pointer items-center justify-start rounded-sm">
            <a
              [ngClass]="{ hidden: !menuService.showSideBar }"
              routerLinkActive="text-primary"
              class="truncate text-xs font-semibold tracking-wide focus:outline-hidden">
              {{ item.label }}
            </a>
          </div>
        </ng-template>

        <!-- Workaround:: Disable routerLink -->
        <ng-template #childMenu let-item="item">
          <div class="flex h-9 grow cursor-pointer items-center justify-start rounded-sm">
            <a
              [ngClass]="{ hidden: !menuService.showSideBar }"
              class="text-muted-foreground group-hover:text-primary truncate text-xs font-semibold tracking-wide focus:outline-hidden">
              {{ item.label }}
            </a>
          </div>
        </ng-template>

        <!-- Arrow Icon -->
        <button
          *ngIf="item.children"
          [ngClass]="{ hidden: !menuService.showSideBar }"
          class="text-foreground/50 flex cursor-pointer items-center justify-end p-0 transition-all duration-500 ltr:right-0 rtl:left-0">
          @if(!item.expanded){
          <svg-icon src="assets/icons/heroicons/outline/plus.svg" svgClass="h-4 w-4"> </svg-icon>
          }@else {
          <svg-icon src="assets/icons/heroicons/outline/minus.svg" svgClass="h-4 w-4"> </svg-icon>
          }
        </button>

        <!-- Tooltip -->
        <div class="z-1 fixed h-[36px]" *ngIf="!menuService.showSideBar">
          <span
            class="z-1 bg-foreground text-background absolute w-auto min-w-max translate-y-[2px] scale-0 rounded-md p-2 text-xs font-bold shadow-md transition-all duration-200 group-hover:scale-100 ltr:origin-left ltr:translate-x-10 rtl:origin-right rtl:-translate-x-10">
            {{ item.label }}
          </span>
        </div>
      </div>

      <!-- Submenu items -->
      <app-sidebar-submenu [submenu]="item"></app-sidebar-submenu>
    </li>
  </ul>

  <div class="py-3" *ngIf="menu.separator">
    <hr class="border-border border-dashed" />
  </div>
</div>

import { NgClass, NgFor, NgIf, NgTemplateOutlet } from '@angular/common';
import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';
import { RouterLink, RouterLinkActive } from '@angular/router';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { SubMenuItem } from 'src/app/core/models/menu.model';
import { MenuService } from '../../../services/menu.service';
import { SidebarSubmenuComponent } from '../sidebar-submenu/sidebar-submenu.component';

@Component({
  selector: 'app-sidebar-menu',
  templateUrl: './sidebar-menu.component.html',
  styleUrls: ['./sidebar-menu.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush,
  imports: [
    NgFor,
    NgClass,
    AngularSvgIconModule,
    NgTemplateOutlet,
    RouterLink,
    RouterLinkActive,
    NgIf,
    SidebarSubmenuComponent,
  ],
})
export class SidebarMenuComponent implements OnInit {
  constructor(public menuService: MenuService) {}

  public toggleMenu(subMenu: SubMenuItem) {
    this.menuService.toggleMenu(subMenu);
  }

  ngOnInit(): void {}
}


<div
  class="max-h-0 overflow-hidden pt-1 transition-all duration-500 ltr:pl-4 rtl:pr-4"
  [ngClass]="{ hidden: !menuService.showSideBar, 'max-h-screen': submenu.expanded }">
  <ul
    class="border-border text-muted-foreground flex flex-col border-dashed ltr:border-l ltr:pl-2 rtl:border-r rtl:pr-2">
    <li *ngFor="let sub of submenu.children">
      <div class="text-muted-foreground hover:text-primary relative flex" (click)="toggleMenu(sub)">
        <!-- Condition -->
        <ng-container
          [ngTemplateOutlet]="sub.children ? childMenu : parentMenu"
          [ngTemplateOutletContext]="{ sub: sub }">
        </ng-container>

        <!-- Parent Menu -->
        <ng-template #parentMenu let-sub="sub">
          <a
            [routerLink]="sub.route"
            routerLinkActive="text-primary"
            [routerLinkActiveOptions]="{ exact: true }"
            class="hover:bg-card inline-block w-full rounded-lg px-4 py-2 text-xs">
            {{ sub.label }}
          </a>
          @if(menuService.isActive(sub.route)){
          <span
            class="size-1.5 bg-primary absolute flex translate-y-3.5 items-center rounded-full ltr:-translate-x-[11.5px] rtl:translate-x-[11.5px]">
          </span>
          }
        </ng-template>

        <!-- Child Menu -->
        <ng-template #childMenu let-sub="sub">
          <a class="inline-block w-full cursor-pointer px-4 py-2 text-xs">
            {{ sub.label }}
          </a>
          <button
            [ngClass]="{ hidden: !menuService.showSideBar }"
            class="text-foreground/50 flex cursor-pointer items-center justify-end px-2 transition-all duration-500">
            @if(!sub.expanded){
            <svg-icon src="assets/icons/heroicons/outline/plus.svg" svgClass="h-4 w-4"> </svg-icon>
            }@else {
            <svg-icon src="assets/icons/heroicons/outline/minus.svg" svgClass="h-4 w-4"> </svg-icon>
            }
          </button>
        </ng-template>
      </div>
      <!-- Submenu items -->
      @if(sub.children?.length){
      <app-sidebar-submenu [submenu]="sub"></app-sidebar-submenu>
      }
    </li>
  </ul>
</div>
import { NgClass, NgFor, NgTemplateOutlet } from '@angular/common';
import { Component, Input, OnInit } from '@angular/core';
import { RouterLink, RouterLinkActive } from '@angular/router';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { SubMenuItem } from 'src/app/core/models/menu.model';
import { MenuService } from '../../../services/menu.service';

@Component({
  selector: 'app-sidebar-submenu',
  templateUrl: './sidebar-submenu.component.html',
  styleUrls: ['./sidebar-submenu.component.css'],
  imports: [NgClass, NgFor, NgTemplateOutlet, RouterLinkActive, RouterLink, AngularSvgIconModule],
})
export class SidebarSubmenuComponent implements OnInit {
  @Input() public submenu = <SubMenuItem>{};

  constructor(public menuService: MenuService) {}

  ngOnInit(): void {}

  public toggleMenu(menu: any) {
    this.menuService.toggleSubMenu(menu);
  }

  private collapse(items: Array<any>) {
    items.forEach((item) => {
      item.expanded = false;
      if (item.children) this.collapse(item.children);
    });
  }
}
import { Injectable, OnDestroy, signal } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { Menu } from 'src/app/core/constants/menu';
import { MenuItem, SubMenuItem } from 'src/app/core/models/menu.model';

@Injectable({
  providedIn: 'root',
})
export class MenuService implements OnDestroy {
  private _showSidebar = signal(true);
  private _showMobileMenu = signal(false);
  private _pagesMenu = signal<MenuItem[]>([]);
  private _subscription = new Subscription();

  constructor(private router: Router) {
    /** Set dynamic menu */
    this._pagesMenu.set(Menu.pages);

    let sub = this.router.events.subscribe((event) => {
      if (event instanceof NavigationEnd) {
        /** Expand menu base on active route */
        this._pagesMenu().forEach((menu) => {
          let activeGroup = false;
          menu.items.forEach((subMenu) => {
            const active = this.isActive(subMenu.route);
            subMenu.expanded = active;
            subMenu.active = active;
            if (active) activeGroup = true;
            if (subMenu.children) {
              this.expand(subMenu.children);
            }
          });
          menu.active = activeGroup;
        });
      }
    });
    this._subscription.add(sub);
  }

  get showSideBar() {
    return this._showSidebar();
  }
  get showMobileMenu() {
    return this._showMobileMenu();
  }
  get pagesMenu() {
    return this._pagesMenu();
  }

  set showSideBar(value: boolean) {
    this._showSidebar.set(value);
  }
  set showMobileMenu(value: boolean) {
    this._showMobileMenu.set(value);
  }

  public toggleSidebar() {
    this._showSidebar.set(!this._showSidebar());
  }

  public toggleMenu(menu: SubMenuItem) {
    this.showSideBar = true;

    /** collapse all submenus except the selected one. */
    const updatedMenu = this._pagesMenu().map((menuGroup) => {
      return {
        ...menuGroup,
        items: menuGroup.items.map((item) => {
          return {
            ...item,
            expanded: item === menu ? !item.expanded : false,
          };
        }),
      };
    });

    this._pagesMenu.set(updatedMenu);
  }

  public toggleSubMenu(submenu: SubMenuItem) {
    submenu.expanded = !submenu.expanded;
  }

  private expand(items: Array<any>) {
    items.forEach((item) => {
      item.expanded = this.isActive(item.route);
      if (item.children) this.expand(item.children);
    });
  }

  public isActive(instruction: any): boolean {
    return this.router.isActive(this.router.createUrlTree([instruction]), {
      paths: 'subset',
      queryParams: 'subset',
      fragment: 'ignored',
      matrixParams: 'ignored',
    });
  }

  ngOnDestroy(): void {
    this._subscription.unsubscribe();
  }
}