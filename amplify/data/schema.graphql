type User @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin", "Manager"], operations: [read, update, delete] }
]) {
  id: ID!
  owner: String @auth(rules: [
    { allow: owner, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, update] }
  ])
  name: String
  email: String
  tickets: [Ticket] @hasMany
  paymentMethods: [PaymentMethod] @hasMany
}

type Project @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin", "Manager"], operations: [read, update, delete] }
]) {
  id: ID!
  owner: String @auth(rules: [
    { allow: owner, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, update] }
  ])
  title: String
}

type PaymentMethod @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin", "Manager"], operations: [read, update, delete] }
]) {
  id: ID!
  owner: String @auth(rules: [
    { allow: owner, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, update] }
  ])
  cardDetails: String
}

type Ticket @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin", "Manager", "Facilities"], operations: [read, update, delete] }
]) {
  id: ID!
  owner: String @auth(rules: [
    { allow: owner, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, update] }
  ])
  description: String
}

type EventLog @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin", "Manager"], operations: [read] }
]) {
  id: ID!
  owner: String @auth(rules: [
    { allow: owner, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, update] }
  ])
  event: String
}

type Friend @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin"], operations: [read, update, delete] }
]) {
  id: ID!
  owner: String @auth(rules: [
    { allow: owner, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, update] }
  ])
  friendId: ID!
}

type Message @model @auth(rules: [
  { allow: owner, ownerField: "sender", operations: [create, read, update, delete] },
  { allow: owner, ownerField: "recipient", operations: [read, update] },
  { allow: groups, groups: ["Admin"], operations: [read] }
]) {
  id: ID!
  sender: String! @auth(rules: [
    { allow: owner, ownerField: "sender", operations: [read] }
  ])
  recipient: String! @auth(rules: [
    { allow: owner, ownerField: "recipient", operations: [read] }
  ])
  content: String!
  createdAt: AWSDateTime!
}
